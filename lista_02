QUESTÃO 1:

#include <stdio.h>

void bubbleSort(int array[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (array[j] > array[j+1]) {
                int temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
}

int main() {
    int array[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(array) / sizeof(array[0]);
    
    int i; 
    
    printf("Antes da ordenacao:\n");
    for (i = 0; i < n; i++)
        printf("%d ", array[i]);

    bubbleSort(array, n);

    printf("\n\nDepois da ordenacao:\n");
    
    
    for (i = 0; i < n; i++)
        printf("%d ", array[i]);

    return 0;
}

QUESTÃO 2:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void bubbleSort(int array[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (array[j] > array[j+1]) {
                int temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
}

void quicksort(int array[], int low, int high) {
    if (low < high) {
        int i = low, j = high;
        int pivot = array[low + (high - low) / 2];

        while (i <= j) {
            while (array[i] < pivot)
                i++;
            while (array[j] > pivot)
                j--;

            if (i <= j) {
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i++;
                j--;
            }
        }

        quicksort(array, low, j);
        quicksort(array, i, high);
    }
}

void merge(int array[], int left, int mid, int right) {
	
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2], i, j, k;

    for (i = 0; i < n1; i++)
        L[i] = array[left + i];
    for (j = 0; j < n2; j++)
        R[j] = array[mid + 1 + j];

    i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        array[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        array[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int array[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(array, left, mid);
        mergeSort(array, mid + 1, right);

        merge(array, left, mid, right);
    }
}

void printArray(int array[], int n) {
	
	int i;
	
    for (i = 0; i < n; i++)
        printf("%d ", array[i]);
    printf("\n");
}

int main() {
    srand(time(0)); 

    int sizes[] = {100, 1000, 10000, 100000}; 
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]), i, j;

    for (i = 0; i < num_sizes; i++) {
        int size = sizes[i];
        int array[size], temp[size];

      
        for (j = 0; j < size; j++)
            array[j] = rand() % 1000;

   
        clock_t start = clock();
        bubbleSort(array, size);
        clock_t end = clock();
        double time_bubble = ((double)(end - start)) / CLOCKS_PER_SEC;


        for (j = 0; j < size; j++)
            temp[j] = array[j];

    
        start = clock();
        quicksort(temp, 0, size - 1);
        end = clock();
        double time_quicksort = ((double)(end - start)) / CLOCKS_PER_SEC;

        for (j = 0; j < size; j++)
            temp[j] = array[j];

    
        start = clock();
        mergeSort(temp, 0, size - 1);
        end = clock();
        double time_mergesort = ((double)(end - start)) / CLOCKS_PER_SEC;

        printf("Tamanho do array: %d\n", size);
        printf("Tempo para Bubble Sort: %f segundos\n", time_bubble);
        printf("Tempo para Quicksort: %f segundos\n", time_quicksort);
        printf("Tempo para Mergesort: %f segundos\n\n", time_mergesort);
    }

    return 0;
}

QUESTÃO 3:

#include <stdio.h>
#include <locale.h>

void insertionSort(int array[], int n) {
	
    int i, key, j;
    
    for (i = 1; i < n; i++) {
        key = array[i];
        j = i - 1;

        while (j >= 0 && array[j] < key) {
            array[j + 1] = array[j];
            j = j - 1;
        }
        array[j + 1] = key;
    }
}

int main() {

    setlocale(LC_ALL, "Portuguese");

    int array[] = {12, 11, 13, 5, 6};
    int n = sizeof(array) / sizeof(array[0]), i;

    printf("Antes da ordenação:\n");
    for (i = 0; i < n; i++)
        printf("%d ", array[i]);

    insertionSort(array, n);

    printf("\n\nDepois da ordenação em ordem decrescente:\n");
    for (i = 0; i < n; i++)
        printf("%d ", array[i]);

    return 0;
}

QUESTÃO 4:

#include <stdio.h>
#include <locale.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
	
    int pivot = arr[high];  
    int i = low - 1, j;  

    for (j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

void quicksort(int arr[], int low, int high) {
    if (low < high) {
    	
        int pi = partition(arr, low, high);

        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

void sortMatrix(int mat[][5], int rows, int cols) {
	
	int i;
	
    for (i = 0; i < rows; i++)
        quicksort(mat[i], 0, cols - 1);
}

void displayMatrix(int mat[][5], int rows, int cols) {
	
	int i, j;
	
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++)
            printf("%d\t", mat[i][j]);
        printf("\n");
    }
}

int main() {
	
	setlocale(LC_ALL, "Portuguese");
	
    int mat[][5] = {{12, 11, 13, 5, 6},
                     {1, 2, 3, 1, 5},
                     {3, 7, 8, 4, 2},
                     {4, 8, 9, 2, 4}};

    int rows = 4;
    int cols = 5;

    printf("Matriz antes da ordenação em ordem crescente:\n");
    displayMatrix(mat, rows, cols);

    sortMatrix(mat, rows, cols);

    printf("\nMatriz depois da ordenaçâo em ordem crescente (por linha):\n");
    displayMatrix(mat, rows, cols);

    return 0;
}

QUESTÃO 5:

#include <stdio.h>
#include <locale.h>

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void sortMatrix(int mat[][5], int rows, int cols) {
	
	int i;
	
    for (i = 0; i < rows; i++)
        insertionSort(mat[i], cols);
}

void displayMatrix(int mat[][5], int rows, int cols) {
	
	int i, j;
	
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++)
            printf("%d\t", mat[i][j]);
        printf("\n");
    }
}

int main() {
	
	setlocale(LC_ALL, "Portuguese");
	
    int mat[][5] = {{12, 11, 13, 5, 6},
                     {1, 2, 3, 1, 5},
                     {3, 7, 8, 4, 2},
                     {4, 8, 9, 2, 4}};

    int rows = 4;
    int cols = 5;

    printf("Matriz antes da ordenação em oredem crescente:\n");
    displayMatrix(mat, rows, cols);

    sortMatrix(mat, rows, cols);

    printf("\nMatriz depois da ordenação em ordem crescente (por linha):\n");
    displayMatrix(mat, rows, cols);

    return 0;
}

QUESTÃO 6:

#include <stdio.h>
#include <locale.h>

typedef struct {
    int row;
    int col;
} Position;

Position searchValue(int mat[][5], int rows, int cols, int value) {
    Position position = {-1, -1};  

    int i, j;

    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            if (mat[i][j] == value) {
                position.row = i;
                position.col = j;
                return position;
            }
        }
    }

    return position;
}

int main() {
	
	setlocale(LC_ALL, "Portuguese");
	
    int mat[][5] = {{12, 11, 13, 5, 6},
                     {1, 2, 3, 1, 5},
                     {3, 7, 8, 4, 2},
                     {4, 8, 9, 2, 4}};

    int rows = 4;
    int cols = 5;
    int value;

    printf("Digite o valor que deseja buscar na matriz: ");
    scanf("%d", &value);

    Position result = searchValue(mat, rows, cols, value);

    if (result.row != -1 && result.col != -1)
        printf("O valor foi encontrado na posição: (%d, %d).\n", result.row, result.col);
    else
        printf("O valor não foi encontrado na matriz.\n");

    return 0;
}
